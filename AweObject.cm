/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;
use cm.syntax;

public class AweObject {
    public str->Object props();
    public constructor() {
    }


    extend public Object get(str propName) {
        return this.props.get(propName);
    }

    extend public void set(str propName, Object value) {
        Object oldValue = get(propName);
        this.props.put(propName, value);
        propChanged(propName, oldValue, value);
    }

            
    extend public void propChanged(str propName, Object oldValue, Object newValue) {

    }        

    extend public bool buildQuickProperties(QuickProperties props) {
        return props and props.properties.any();
    }


    extend public bool quickPropertyChanged(QuickProperties props, str key, Object value, bool testChangeOnly) {
        return false;
    }
}

public definition @visibility aweObject @name=id @parentClass=["extends" type]? '{'  @props=["props" formalArgList ';']? @members=[classMember]* '}' {
    
    if(!parentClass) {
        parentClass = SType("AweObject");
    }

    SMembers gettersSetters(noSrcRef);
    SMembers onChange(noSrcRef);
    SStatements initProps();

    if(props) {

        for(i in 0..(props.count-1)) {
            SFormalArg arg = props[i];
            SType propType = arg.typeSyntax;
            SId propName = arg.id;
            str propNameStr = propName.name;
            SExpr propInitialValue = arg.default();
            SId onChangeMethodName(propName#"Changed");
            SId getDomainMethodName(propName#"Domain");
            
            //3 signatures for change
            onChange << member {
                extend @visibility void @onChangeMethodName() { }
                extend @visibility void @onChangeMethodName(@propType newValue) { }
                extend @visibility void @onChangeMethodName(@propType oldValue, @propType newValue) { }
            };

            gettersSetters << member {
                extend @visibility @propType @propName() {
                    Object value = this.get(@propNameStr);
                    if(value) {
                        return value.@propType;
                    }
                    return @propInitialValue;
                }
                extend @visibility @propType @propName=(@propType newValue) {
                    @propType oldValue = this.@propName;
                    this.set(@propNameStr, newValue);
                    this.@onChangeMethodName();
                    this.@onChangeMethodName(newValue);
                    this.@onChangeMethodName(oldValue, newValue);
                    return newValue;
                }
            };

            initProps << statement {
                this.@propName = @propName;
            };
        }
    }
    
    SId baseClassName(name.name#"_BaseClass");

    SMembers membersBundle(noSrcRef);
    for(m in members) {
        membersBundle << m;
    }

    if(props) {
        definition {
            @visibility class @baseClassName extends @parentClass {
                @gettersSetters;
                @onChange;
            }
        };

        definition {
            @visibility class @name extends @baseClassName {
                public constructor(@props) {
                    @initProps;
                }
                @membersBundle;
            }
        };
    } else  {
        //pretty useless, huh?
        definition {
            @visibility class @name extends @parentClass {
                @membersBundle;
            }
        };
    }
    
}

public member @visibility aweObjectDomain @domains=formalArgList ';' {

    SMembers domainMembers(noSrcRef);
    SStatements buildQuickProperties();
    SStatements quickPropertiesChanged();
    
    for(i in 0..(domains.count-1)) {
        SFormalArg arg = domains[i];
        SId propName = arg.id;
        str propNameStr = propName.name;
        SType propType = arg.typeSyntax;
        SId domainName(arg.id.name#"Domain");
        SExpr domainInitialValue = arg.default();
        SId labelName(arg.id.name#"Label");
        SId visibleName(arg.id.name#"Visible");

        domainMembers << member {
            @visibility SubSet @domainName = @domainInitialValue;
            @visibility str @labelName = @propNameStr.propNameToLabel();
            @visibility bool @visibleName = true;
        };

        //we use distance subsets for double properties, so we need this great if statement there:
        if (propType.type == distance) {
            buildQuickProperties << statement {
                if (@domainName and @visibleName) {
                    Object customQuickProperty = aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, distance(@propName));

                    if (@domainName.any()) {
                        if (customQuickProperty) {
                            props.append(customQuickProperty.QuickProperty);
                        }
                        else {
                            props.append(@propNameStr, @labelName, distance(@propName), @domainName);
                        }
                    }
                }
            };
        }
        else {
            buildQuickProperties << statement {
                if (@domainName and @visibleName) {
                    Object customQuickProperty = aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, @propName);

                    if (@domainName.any()) {
                        if (customQuickProperty) {
                            props.append(customQuickProperty.QuickProperty);
                        }
                        else {
                            props.append(@propNameStr, @labelName, @propName, @domainName);
                        }
                    }
                }
            };
        }
        
        quickPropertiesChanged << statement {
            if (key == @propNameStr) {
                this.@propName = value.@propType;
                return true;
            }
        };
    }

    return member {
        @domainMembers;
                
        @visibility bool buildQuickProperties(QuickProperties props) {
            super(..);
            @buildQuickProperties;
            return true;
        }

        @visibility bool quickPropertyChanged(QuickProperties props, str key, Object value, bool testChangeOnly) {
            if (key and !testChangeOnly) {
                @quickPropertiesChanged;
            }
            return super(..);
        }
    };
}